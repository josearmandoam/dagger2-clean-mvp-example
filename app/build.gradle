apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'checkstyle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

task checkstyle(type: Checkstyle) {
    configFile = rootProject.file('config/checkstyle.xml')

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "es.voghdev.prjdagger2"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String","DEFAULT_USER","\"\"")
            buildConfigField "String","DEFAULT_PASSWORD","\"\""
        }

        debug {
            buildConfigField("String", "DEFAULT_USER", "\"autoassigned_user@example.com\"")
            buildConfigField "String", "DEFAULT_PASSWORD", "\"4notherWay0fD3finingBuildC0nfigVars\""
        }
    }

    productFlavors {
        prod {
            Properties prop = new Properties();
            prop.load(project.rootProject.file('dev.properties').newDataInputStream())
            def iv = prop.get("iv", null)
            def secretKey = prop.get("secretKey", null)
            def root = "https://api.randomuser.me/"
            buildConfigField("String", "ROOT_URL", "\"${root}\"")
            buildConfigField("String", "IV", iv)
            buildConfigField("String", "SECRET_KEY", secretKey)
        }
        cpws {
            Properties prop = new Properties();
            prop.load(project.rootProject.file('dev.properties').newDataInputStream())
            def iv = prop.get("iv", null)
            def secretKey = prop.get("secretKey", null)
            def root = "http://add.your.test.server.location/here"
            buildConfigField("String", "ROOT_URL", "\"${root}\"")
            buildConfigField("String", "IV", iv)
            buildConfigField("String", "SECRET_KEY", secretKey)
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Google
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.dagger:dagger:2.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    provided 'javax.annotation:jsr250-api:1.0'

    // Square
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.picasso:picasso:2.3.+'

    // Libs from cool developers
    compile 'com.github.pedrovgs:renderers:2.0.3'
    compile 'es.voghdev.progressbuttonview:ProgressButtonView:0.7.9'

    // Testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Android Testing Support Library's runner and rules
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'

    // Dependencies for Android unit tests
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Espresso UI Testing
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'


}
